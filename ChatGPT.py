# meta developer: @netfoll_mods
# requires: openai


import logging


import openai
import openai.error


from datetime import datetime


from telethon.tl.custom import Message


from .. import loader, utils


@loader.tds
class ChatGPTMod(loader.Module):
    """Module for chatting with ChatGPT. Based on OpenAI api."""

    strings = {
        "name": "ChatGPT",
        "processing": "<b>‚è± Your request is being processed...</b>",
        "where_args?": "<b>üö´ Specify arguments!</b>",
        "set_token": "<b>üö´ Set token in config!</b>",
        "incorrect_token": "<b>üö´ You specified incorrect token in config!</b>",
        "unknown_openai_error": "<b>üö´ An OpenAI related error has occurred!</b>\n<code>{}: {}</code>",
        "unknown_error": "<b>üö´ An unknown error occurred!</b>\n<code>{}: {}</code>",
        "result": (
            "<b>‚ùì Your question: </b><code>{}</code>"
            "\n\n<b>üôãüèº‚Äç‚ôÇÔ∏è ChatGPT answer: </b><code>{}</code>"
        ),
        "debug_result": (
            "<b>‚ùì Your question: </b><code>{}</code>"
            "\n\n<b>üôãüèº‚Äç‚ôÇÔ∏è ChatGPT answer: </b><code>{}</code>"
            "\n\n<b>‚ÑπÔ∏è Used tokens: </b><code>{}</code>"
        ),
        "edit_result": (
            "<b>‚ùå Original text: </b><code>{}</code>"
            "\n\n<b>‚úîÔ∏è Corrected text: </b><code>{}</code>"
        ),
        "edit_debug_result": (
            "<b>‚ùå Original text: </b><code>{}</code>"
            "\n\n<b>‚úîÔ∏è Corrected text: </b><code>{}</code>"
            "\n\n<b>‚ÑπÔ∏è Used tokens: </b><code>{}</code>"
        ),
        "_cfg_doc_debug_info": "Whether information about used tokens will be shown",
        "_cfg_doc_openai_token": "OpenAI API token",
    }

    strings_ru = {
        "where_args?": "<b>üö´ –£–∫–∞–∂–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>",
        "set_token": "<b>üö´ –ü–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!</b>",
        "incorrect_token": "<b>üö´ –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!</b>",
        "unknown_openai_error": "<b>üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å OpenAI!</b>\n<code>{}: {}</code>",
        "unknown_error": "<b>üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!</b>\n<code>{}: {}</code>",
        "processing": "<b>‚è± –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...</b>",
        "result": (
            "<b>‚ùì –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: </b><code>{}</code>"
            "\n\n<b>üôãüèº‚Äç‚ôÇÔ∏è –û—Ç–≤–µ—Ç ChatGPT: </b><code>{}</code>"
        ),
        "debug_result": (
            "<b>‚ùì –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: </b><code>{}</code>"
            "\n\n<b>üôãüèº‚Äç‚ôÇÔ∏è –û—Ç–≤–µ—Ç ChatGPT: </b><code>{}</code>"
            "\n\n<b>‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: </b><code>{}</code>"
        ),
        "edit_result": (
            "<b>‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: </b><code>{}</code>"
            "\n\n<b>‚úîÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: </b><code>{}</code>"
        ),
        "edit_debug_result": (
            "<b>‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: </b><code>{}</code>"
            "\n\n<b>‚úîÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: </b><code>{}</code>"
            "\n\n<b>‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: </b><code>{}</code>"
        ),
        "_cfg_doc_debug_info": "–ë—É–¥–µ—Ç –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö",
        "_cfg_doc_openai_token": "–¢–æ–∫–µ–Ω OpenAI API",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT. –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ OpenAI API.",
        "_cmd_doc_chatgpt": "–°–ø—Ä–æ—Å–∏—Ç—å ChatGPT –æ —á—ë–º-–Ω–∏–±—É–¥—å. –í –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        "_cmd_doc_edits": "–ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–≤–æ—ë–º —Ç–µ–∫—Å—Ç–µ.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "openai_token",
                None,
                lambda: self.strings["_cfg_doc_openai_token"],
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "debug_info",
                False,
                lambda: self.strings["_cfg_doc_debug_info"],
                validator=loader.validators.Boolean(),
            ),
        )

    async def client_ready(self, _, __):
        logging.getLogger("openai").propagate = False
        # –Ω–µ —Ö–æ—á—É –≤–∞–º –ª–æ–≥–∏ –∑–∞–±–∏–≤–∞—Ç—å

    async def chatgptcmd(self, message: Message) -> None:
        """Ask ChatGPT about something. Specify your question in arguments."""

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["where_args?"])
            return

        await utils.answer(message, self.strings["processing"])

        openai.api_key = self.config["openai_token"]

        try:
            day = datetime.today().day
            month = datetime.today().month
            year = datetime.today().year

            json_result = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "Hello. You are ChatGPT, a large language model trained by OpenAI."
                            "Answer as concisely as possible."
                            "Current date: {} {} {}"
                        ).format(day, month, year),
                    },
                    {
                        "role": "user",
                        "content": args,
                    },
                ],
            )
            answer = json_result["choices"][0]["message"]["content"]
            tokens = json_result["usage"]["total_tokens"]

        except Exception as e:
            if isinstance(e, openai.error.AuthenticationError):
                if str(e).startswith("No API key provided"):
                    await utils.answer(message, self.strings["set_token"])
                    return

                elif str(e).startswith("Incorrect API key provided"):
                    await utils.answer(message, self.strings["incorrect_token"])
                    return

                else:
                    await utils.answer(
                        message,
                        self.strings["unknown_openai_error"].format(
                            e.__class__.__name__,
                            utils.escape_html(str(e)),
                        ),
                    )
                    return
            else:
                await utils.answer(
                    message,
                    self.strings["unknown_error"].format(
                        e.__class__.__name__,
                        utils.escape_html(str(e)),
                    ),
                )
                return

        await utils.answer(
            message,
            self.strings["result"].format(
                utils.escape_html(args),
                utils.escape_html(answer),
            )
            if not self.config["debug_info"]
            else self.strings["debug_result"].format(
                utils.escape_html(args), utils.escape_html(answer), tokens
            ),
        )
        openai.api_key = None

    async def editscmd(self, message: Message):
        """Correct spelling errors in your text."""

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["where_args?"])
            return

        await utils.answer(message, self.strings["processing"])

        openai.api_key = self.config["openai_token"]

        try:
            json_result = await openai.Edit.acreate(
                model="text-davinci-edit-001",
                input=args,
                instruction="Fix the spelling mistakes.",
            )

            result = json_result["choices"][0]["text"]
            tokens = json_result["usage"]["total_tokens"]
        except Exception as e:
            if isinstance(e, openai.error.AuthenticationError):
                if str(e).startswith("No API key provided"):
                    await utils.answer(message, self.strings["set_token"])
                    return

                elif str(e).startswith("Incorrect API key provided"):
                    await utils.answer(message, self.strings["incorrect_token"])
                    return

                else:
                    await utils.answer(
                        message,
                        self.strings["unknown_openai_error"].format(
                            e.__class__.__name__,
                            utils.escape_html(str(e)),
                        ),
                    )
                    return
            else:
                await utils.answer(
                    message,
                    self.strings["unknown_error"].format(
                        e.__class__.__name__,
                        utils.escape_html(str(e)),
                    ),
                )
                return

        await utils.answer(
            message,
            self.strings["edit_result"].format(
                utils.escape_html(args),
                utils.escape_html(result),
            )
            if not self.config["debug_info"]
            else self.strings["edit_debug_result"].format(
                utils.escape_html(args),
                utils.escape_html(result),
                tokens,
            ),
        )

        openai.api_key = None
